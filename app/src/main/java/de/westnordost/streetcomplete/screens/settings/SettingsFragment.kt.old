        // todo: remove pref and related strings
        findPreference<Preference>("read_log")?.setOnPreferenceClickListener {
            var reversed = false
            var filter = "" // todo: separate filter by level or tag?
            var maxLines = 200
            val log = TextView(requireContext())
            var lines = TempLogger.getLog().take(maxLines)
            log.setTextIsSelectable(true)
            log.text = lines.joinToString("\n")
            fun reloadText() {
                val l = TempLogger.getLog()
                lines = when {
                    filter.isNotBlank() && reversed -> l.asReversed().filter { line -> line.toString().contains(filter, true) }
                    filter.isNotBlank() -> l.filter { line -> line.toString().contains(filter, true) }
                    reversed -> l.asReversed()
                    else -> l
                }.take(maxLines)
                log.text = lines.joinToString("\n")
            }
            val scrollLog = ScrollView(requireContext()).apply {
                addView(log)
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    setOnScrollChangeListener { _, _, _, _, _ ->
                        if (log.bottom <= height + scrollY && lines.size >= maxLines) {
                            maxLines *= 2
                            reloadText()
                        }
                    }
                }
            }
            val reverseButton = Button(requireContext())
            reverseButton.setText(R.string.pref_read_reverse_button)
            reverseButton.setOnClickListener {
                reversed = !reversed
                reloadText()
                scrollLog.scrollY = 0
            }
            val filterView = EditText(requireContext()).apply {
                setHint(R.string.pref_read_filter_hint)
                doAfterTextChanged {
                    filter = it.toString()
                    val previousCursorPosition = selectionStart
                    reloadText()
                    scrollLog.fullScroll(View.FOCUS_UP)
                    requestFocus() // focus is lost when scrolling it seems
                    setSelection(previousCursorPosition)
                }
                setDefaultDialogPadding() // not a dialog, but still suitable
            }
            val layout = LinearLayout(requireContext()).apply { orientation = LinearLayout.VERTICAL }
            layout.addView(LinearLayout(requireContext()).apply {
                addView(reverseButton)
                addView(filterView)
            }) // put this on top, or layout will need more work to keep this visible
            layout.addView(scrollLog)
            val d = AlertDialog.Builder(requireContext())
                .setTitle(R.string.pref_read_log_title)
                .setView(layout) // not using default padding to allow longer log lines (looks ugly, but is very convenient)
                .setPositiveButton(R.string.close, null)
                .setNegativeButton(R.string.pref_read_log_save) { _, _ ->
                    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {
                        addCategory(Intent.CATEGORY_OPENABLE)
                        val fileName = "${ApplicationConstants.NAME}_${BuildConfig.VERSION_NAME}_log_${nowAsEpochMilliseconds()}.txt"
                        putExtra(Intent.EXTRA_TITLE, fileName)
                        type = "application/text"
                    }
                    startActivityForResult(intent, REQUEST_CODE_LOG)
                }
                .create()
            d.show()
            // maximize dialog size, because log lines are long
            d.window?.setLayout(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT)

            true
        }
        if (!prefs.getBoolean(Prefs.TEMP_LOGGER, false))
            findPreference<Preference>("read_log")?.isVisible = false

        findPreference<Preference>("debug")?.isVisible = BuildConfig.DEBUG

        findPreference<Preference>("debug.quests")?.setOnPreferenceClickListener {
            startActivity(Intent(context, ShowQuestFormsActivity::class.java))
            true
        }
    }

    // todo: remove
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        if (resultCode != Activity.RESULT_OK || data == null || requestCode != REQUEST_CODE_LOG)
            return
        val uri = data.data ?: return
        activity?.contentResolver?.openOutputStream(uri)?.use { os ->
            os.bufferedWriter().use { it.write(TempLogger.getLog().joinToString("\n")) }
        }
    }

}

private const val REQUEST_CODE_LOG = 9743143
